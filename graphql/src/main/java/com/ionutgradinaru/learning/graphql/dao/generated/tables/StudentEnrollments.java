/*
 * This file is generated by jOOQ.
 */
package com.ionutgradinaru.learning.graphql.dao.generated.tables;


import com.ionutgradinaru.learning.graphql.dao.generated.Keys;
import com.ionutgradinaru.learning.graphql.dao.generated.Public;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.Courses.CoursesPath;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.Students.StudentsPath;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.records.StudentEnrollmentsRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StudentEnrollments extends TableImpl<StudentEnrollmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_enrollments</code>
     */
    public static final StudentEnrollments STUDENT_ENROLLMENTS = new StudentEnrollments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentEnrollmentsRecord> getRecordType() {
        return StudentEnrollmentsRecord.class;
    }

    /**
     * The column <code>public.student_enrollments.enrollment_id</code>.
     */
    public final TableField<StudentEnrollmentsRecord, Integer> ENROLLMENT_ID = createField(DSL.name("enrollment_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.student_enrollments.student_id</code>.
     */
    public final TableField<StudentEnrollmentsRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.student_enrollments.course_id</code>.
     */
    public final TableField<StudentEnrollmentsRecord, Integer> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.student_enrollments.enrollment_date</code>.
     */
    public final TableField<StudentEnrollmentsRecord, LocalDate> ENROLLMENT_DATE = createField(DSL.name("enrollment_date"), SQLDataType.LOCALDATE, this, "");

    private StudentEnrollments(Name alias, Table<StudentEnrollmentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private StudentEnrollments(Name alias, Table<StudentEnrollmentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.student_enrollments</code> table reference
     */
    public StudentEnrollments(String alias) {
        this(DSL.name(alias), STUDENT_ENROLLMENTS);
    }

    /**
     * Create an aliased <code>public.student_enrollments</code> table reference
     */
    public StudentEnrollments(Name alias) {
        this(alias, STUDENT_ENROLLMENTS);
    }

    /**
     * Create a <code>public.student_enrollments</code> table reference
     */
    public StudentEnrollments() {
        this(DSL.name("student_enrollments"), null);
    }

    public <O extends Record> StudentEnrollments(Table<O> path, ForeignKey<O, StudentEnrollmentsRecord> childPath, InverseForeignKey<O, StudentEnrollmentsRecord> parentPath) {
        super(path, childPath, parentPath, STUDENT_ENROLLMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StudentEnrollmentsPath extends StudentEnrollments implements Path<StudentEnrollmentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StudentEnrollmentsPath(Table<O> path, ForeignKey<O, StudentEnrollmentsRecord> childPath, InverseForeignKey<O, StudentEnrollmentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StudentEnrollmentsPath(Name alias, Table<StudentEnrollmentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StudentEnrollmentsPath as(String alias) {
            return new StudentEnrollmentsPath(DSL.name(alias), this);
        }

        @Override
        public StudentEnrollmentsPath as(Name alias) {
            return new StudentEnrollmentsPath(alias, this);
        }

        @Override
        public StudentEnrollmentsPath as(Table<?> alias) {
            return new StudentEnrollmentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<StudentEnrollmentsRecord, Integer> getIdentity() {
        return (Identity<StudentEnrollmentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudentEnrollmentsRecord> getPrimaryKey() {
        return Keys.STUDENT_ENROLLMENTS_PKEY;
    }

    @Override
    public List<ForeignKey<StudentEnrollmentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_ENROLLMENTS__STUDENT_ENROLLMENTS_COURSE_ID_FKEY, Keys.STUDENT_ENROLLMENTS__STUDENT_ENROLLMENTS_STUDENT_ID_FKEY);
    }

    private transient CoursesPath _courses;

    /**
     * Get the implicit join path to the <code>public.courses</code> table.
     */
    public CoursesPath courses() {
        if (_courses == null)
            _courses = new CoursesPath(this, Keys.STUDENT_ENROLLMENTS__STUDENT_ENROLLMENTS_COURSE_ID_FKEY, null);

        return _courses;
    }

    private transient StudentsPath _students;

    /**
     * Get the implicit join path to the <code>public.students</code> table.
     */
    public StudentsPath students() {
        if (_students == null)
            _students = new StudentsPath(this, Keys.STUDENT_ENROLLMENTS__STUDENT_ENROLLMENTS_STUDENT_ID_FKEY, null);

        return _students;
    }

    @Override
    public StudentEnrollments as(String alias) {
        return new StudentEnrollments(DSL.name(alias), this);
    }

    @Override
    public StudentEnrollments as(Name alias) {
        return new StudentEnrollments(alias, this);
    }

    @Override
    public StudentEnrollments as(Table<?> alias) {
        return new StudentEnrollments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentEnrollments rename(String name) {
        return new StudentEnrollments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentEnrollments rename(Name name) {
        return new StudentEnrollments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentEnrollments rename(Table<?> name) {
        return new StudentEnrollments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentEnrollments where(Condition condition) {
        return new StudentEnrollments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentEnrollments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentEnrollments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentEnrollments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentEnrollments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentEnrollments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentEnrollments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentEnrollments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentEnrollments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentEnrollments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

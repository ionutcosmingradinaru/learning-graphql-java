/*
 * This file is generated by jOOQ.
 */
package com.ionutgradinaru.learning.graphql.dao.generated.tables;


import com.ionutgradinaru.learning.graphql.dao.generated.Keys;
import com.ionutgradinaru.learning.graphql.dao.generated.Public;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.Courses.CoursesPath;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.records.TeachersRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Teachers extends TableImpl<TeachersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.teachers</code>
     */
    public static final Teachers TEACHERS = new Teachers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeachersRecord> getRecordType() {
        return TeachersRecord.class;
    }

    /**
     * The column <code>public.teachers.teacher_id</code>.
     */
    public final TableField<TeachersRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.teachers.first_name</code>.
     */
    public final TableField<TeachersRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.teachers.last_name</code>.
     */
    public final TableField<TeachersRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.teachers.email</code>.
     */
    public final TableField<TeachersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.teachers.hire_date</code>.
     */
    public final TableField<TeachersRecord, LocalDate> HIRE_DATE = createField(DSL.name("hire_date"), SQLDataType.LOCALDATE, this, "");

    private Teachers(Name alias, Table<TeachersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Teachers(Name alias, Table<TeachersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.teachers</code> table reference
     */
    public Teachers(String alias) {
        this(DSL.name(alias), TEACHERS);
    }

    /**
     * Create an aliased <code>public.teachers</code> table reference
     */
    public Teachers(Name alias) {
        this(alias, TEACHERS);
    }

    /**
     * Create a <code>public.teachers</code> table reference
     */
    public Teachers() {
        this(DSL.name("teachers"), null);
    }

    public <O extends Record> Teachers(Table<O> path, ForeignKey<O, TeachersRecord> childPath, InverseForeignKey<O, TeachersRecord> parentPath) {
        super(path, childPath, parentPath, TEACHERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TeachersPath extends Teachers implements Path<TeachersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TeachersPath(Table<O> path, ForeignKey<O, TeachersRecord> childPath, InverseForeignKey<O, TeachersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TeachersPath(Name alias, Table<TeachersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TeachersPath as(String alias) {
            return new TeachersPath(DSL.name(alias), this);
        }

        @Override
        public TeachersPath as(Name alias) {
            return new TeachersPath(alias, this);
        }

        @Override
        public TeachersPath as(Table<?> alias) {
            return new TeachersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TeachersRecord, Integer> getIdentity() {
        return (Identity<TeachersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeachersRecord> getPrimaryKey() {
        return Keys.TEACHERS_PKEY;
    }

    @Override
    public List<UniqueKey<TeachersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TEACHERS_EMAIL_KEY);
    }

    private transient CoursesPath _courses;

    /**
     * Get the implicit to-many join path to the <code>public.courses</code>
     * table
     */
    public CoursesPath courses() {
        if (_courses == null)
            _courses = new CoursesPath(this, null, Keys.COURSES__COURSES_TEACHER_ID_FKEY.getInverseKey());

        return _courses;
    }

    @Override
    public Teachers as(String alias) {
        return new Teachers(DSL.name(alias), this);
    }

    @Override
    public Teachers as(Name alias) {
        return new Teachers(alias, this);
    }

    @Override
    public Teachers as(Table<?> alias) {
        return new Teachers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teachers rename(String name) {
        return new Teachers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teachers rename(Name name) {
        return new Teachers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teachers rename(Table<?> name) {
        return new Teachers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teachers where(Condition condition) {
        return new Teachers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teachers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teachers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teachers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teachers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teachers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teachers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teachers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teachers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teachers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

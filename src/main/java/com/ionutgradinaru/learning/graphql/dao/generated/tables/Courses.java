/*
 * This file is generated by jOOQ.
 */
package com.ionutgradinaru.learning.graphql.dao.generated.tables;


import com.ionutgradinaru.learning.graphql.dao.generated.Keys;
import com.ionutgradinaru.learning.graphql.dao.generated.Public;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.StudentEnrollments.StudentEnrollmentsPath;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.Teachers.TeachersPath;
import com.ionutgradinaru.learning.graphql.dao.generated.tables.records.CoursesRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Courses extends TableImpl<CoursesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.courses</code>
     */
    public static final Courses COURSES = new Courses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursesRecord> getRecordType() {
        return CoursesRecord.class;
    }

    /**
     * The column <code>public.courses.course_id</code>.
     */
    public final TableField<CoursesRecord, Integer> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.courses.title</code>.
     */
    public final TableField<CoursesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.courses.description</code>.
     */
    public final TableField<CoursesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.courses.start_date</code>.
     */
    public final TableField<CoursesRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.courses.end_date</code>.
     */
    public final TableField<CoursesRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.courses.teacher_id</code>.
     */
    public final TableField<CoursesRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER, this, "");

    private Courses(Name alias, Table<CoursesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Courses(Name alias, Table<CoursesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.courses</code> table reference
     */
    public Courses(String alias) {
        this(DSL.name(alias), COURSES);
    }

    /**
     * Create an aliased <code>public.courses</code> table reference
     */
    public Courses(Name alias) {
        this(alias, COURSES);
    }

    /**
     * Create a <code>public.courses</code> table reference
     */
    public Courses() {
        this(DSL.name("courses"), null);
    }

    public <O extends Record> Courses(Table<O> path, ForeignKey<O, CoursesRecord> childPath, InverseForeignKey<O, CoursesRecord> parentPath) {
        super(path, childPath, parentPath, COURSES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoursesPath extends Courses implements Path<CoursesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoursesPath(Table<O> path, ForeignKey<O, CoursesRecord> childPath, InverseForeignKey<O, CoursesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoursesPath(Name alias, Table<CoursesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoursesPath as(String alias) {
            return new CoursesPath(DSL.name(alias), this);
        }

        @Override
        public CoursesPath as(Name alias) {
            return new CoursesPath(alias, this);
        }

        @Override
        public CoursesPath as(Table<?> alias) {
            return new CoursesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CoursesRecord, Integer> getIdentity() {
        return (Identity<CoursesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoursesRecord> getPrimaryKey() {
        return Keys.COURSES_PKEY;
    }

    @Override
    public List<ForeignKey<CoursesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COURSES__COURSES_TEACHER_ID_FKEY);
    }

    private transient TeachersPath _teachers;

    /**
     * Get the implicit join path to the <code>public.teachers</code> table.
     */
    public TeachersPath teachers() {
        if (_teachers == null)
            _teachers = new TeachersPath(this, Keys.COURSES__COURSES_TEACHER_ID_FKEY, null);

        return _teachers;
    }

    private transient StudentEnrollmentsPath _studentEnrollments;

    /**
     * Get the implicit to-many join path to the
     * <code>public.student_enrollments</code> table
     */
    public StudentEnrollmentsPath studentEnrollments() {
        if (_studentEnrollments == null)
            _studentEnrollments = new StudentEnrollmentsPath(this, null, Keys.STUDENT_ENROLLMENTS__STUDENT_ENROLLMENTS_COURSE_ID_FKEY.getInverseKey());

        return _studentEnrollments;
    }

    @Override
    public Courses as(String alias) {
        return new Courses(DSL.name(alias), this);
    }

    @Override
    public Courses as(Name alias) {
        return new Courses(alias, this);
    }

    @Override
    public Courses as(Table<?> alias) {
        return new Courses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Courses rename(String name) {
        return new Courses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Courses rename(Name name) {
        return new Courses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Courses rename(Table<?> name) {
        return new Courses(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Courses where(Condition condition) {
        return new Courses(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Courses where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Courses where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Courses where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Courses where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Courses where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Courses where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Courses where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Courses whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Courses whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
